# -*- coding: utf-8 -*-
"""
Created on Thu Jul 13 12:00:52 2023

@author: Ghazal Azarfar
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib qt 

def data_stat(data, step, xlabel):
    data_min = np.min(data)
    data_max = np.max(data)
    data_mean = np.mean(data)
    data_var = np.var(data)
    mybin = range(int(np.floor(data_min)),int(np.floor(data_max))+1, step)
    plt.figure()
    plt.hist(data,mybin)
    plt.xlabel(xlabel)
    plt.ylabel('count')
    plt.xlim((data_min, data_max)) 
    plt.title('min = {:.0f}'.format(data_min) + ', max = {:.0f}'.format(data_max) +', mean = {:.2f}'.format(data_mean) + ', var = {:.2f}'.format(data_var))
    return data_min, data_max, data_mean, data_var


def data_pichart(data):
    mylabels =  data.unique()
    y = data.value_counts()
    percentage = y[mylabels]/np.sum(y[mylabels])*100
    plt.figure()
    plt.pie(y[mylabels], labels = mylabels)
    plt.show() 
    return y, mylabels, percentage

def days_to_month_year(data, xlabel):
    data_min = np.min(data)
    data_max = np.max(data)
    data_mean = np.mean(data)
    data_var = np.var(data)
    data = data.values
    months_year = len(data[np.where((data <= 135))])
    months_year = np.reshape(months_year,(1,1))
    months_year.shape
    #axis_title = ['<3 month','3 month','6 month','9 month','1 year', ]
    #print('[less than ' + str(135) + ' days, or ' + str(135/30) + ' months]')
    for i in range (1,4):
        tmp =  len(data[np.where((data > 90*i+45) & (data <= 90*(i+1)+45))])
        months_year = np.append(months_year, np.reshape(tmp,(1,1)), axis = 0)
        #print('[day interval is: ' + str(90*i+45) + ' to ' + str(90*(i+1)+45) + ']  ' + '[3 month interval is: ' + str((90*i+45)/90) + ' to ' + str((90*(i+1)+45)/90) + ']' )

    tmp = len(data[np.where((data > 90*(3+1)+45) & (data <= 182*(2+1)+90))])
    months_year = np.append(months_year, np.reshape(tmp,(1,1)), axis = 0)
    #print('[day interval is: ' + str(90*(3+1)+45) + ' to ' + str(182*(2+1)+90) + ']  ' + '[6 month interval is: ' + str((90*(3+1)+45)/182) + ' to ' + str((182*(2+1)+90)/182) + ']' )
    for i in range(3,10):
        tmp =  len(data[np.where((data > 182*i+90) & (data <= 182*(i+1)+90))])
        months_year = np.append(months_year,  np.reshape(tmp,(1,1)), axis = 0)
        #print('[day interval is: ' + str(182*i+90) + ' to ' + str(182*(i+1)+90) + ']  ' + '[6 month interval is: ' + str((182*i+90)/182) + ' to ' + str((182*(i+1)+90)/182) + ']' )
    
    tmp =  len(data[np.where((data > 182*(9+1)+90) & (data <= 365*6))])
    months_year = np.append(months_year, np.reshape(tmp,(1,1)), axis = 0) 
    #print('[day interval is: ' + str(182*(9+1)+90) + ' to ' + str(365*6) + ']  ' + '[1 year interval is: ' + str((182*(9+1)+90)/365) + ' to ' + str(365*6/365) + ']' )
    
    for i in range(6,10):
        tmp =  len(data[np.where((data > 365*i) & (data <= 365*(i+1)))])
        months_year = np.append(months_year, np.reshape(tmp,(1,1)), axis = 0)
        #print('[day interval is: ' + str(365*i) + ' to ' + str(365*(i+1)) + ']  ' + '[1 year interval is: ' + str((365*i)/365) + ' to ' + str((365*(i+1))/365) + ']' )
    tmp =  len(data[np.where((data > 365*(9+1)) & (data <= np.max(data)))])
    months_year = np.append(months_year, np.reshape(tmp,(1,1)), axis = 0)

    axis_legends = ['< 3 month', '6 months', '9 months', '1 year', '1.5 years', '2 years', '2.5 years', '3 years', '3.5 years', '4 years', '4.5 years', '5 years', '6 years', '7 years', '8 years', '9 years', '10 years', '> 10 years' ]
    plt.figure()
    plt.bar(axis_legends,months_year.flatten())
    plt.xlabel(xlabel)
    plt.ylabel('count')
    plt.title('min = {:.0f}'.format(data_min) + ', max = {:.0f}'.format(data_max) +', mean = {:.2f}'.format(data_mean) + ', var = {:.2f}'.format(data_var))    
    return axis_legends, months_year


def select_patients_SOD(data, SOD):
    MyBolninx = SOD.isin(['Checked'])
    patients = data.to_dict('list')
    patients = pd.DataFrame(patients, index = MyBolninx)
    patients = patients.loc[True];
    patients= patients.set_index(np.array(range(0,len(patients))))
    return patients

path2data = "D:\\UHN\\Covid19 Vaccination\\"
fname = 'Patient_Char.csv'


col_list = ["PatientID","Age","DataAccessGroup","BMI","Sex", "Days_from_Transplant_to_enroll"]
patient_char = pd.read_csv(path2data + fname, usecols=col_list)

age_min, age_max, age_mean, age_var = data_stat(patient_char.Age, 1,'Age')


y_hospital, hospital, patient_percentage  = data_pichart(patient_char.DataAccessGroup)

y_Sex, Sex_type, Sex_percentage  = data_pichart(patient_char.Sex)


day_min, day_max, day_mean, day_var = data_stat(patient_char.Days_from_Transplant_to_enroll, 90,'SOT day to enrollmen (90 days)')


axis_legends, months_year = days_to_month_year(patient_char.Days_from_Transplant_to_enroll, 'SOD to enrollment(day)')

col_list = ["PatientID","Lung","Heart","Liver","Kidney","Pancreas","Stem_Cell"]
patient_transplant_info = pd.read_csv(path2data + fname, usecols=col_list)


Lung_patients=select_patients_SOD(patient_transplant_info, patient_transplant_info.Lung)
Heart_patients=select_patients_SOD(patient_transplant_info, patient_transplant_info.Heart)
Liver_patients=select_patients_SOD(patient_transplant_info, patient_transplant_info.Liver)
Kidney_patients=select_patients_SOD(patient_transplant_info, patient_transplant_info.Kidney)
Pancreas_patients=select_patients_SOD(patient_transplant_info, patient_transplant_info.Pancreas)
Stem_Cell_patients=select_patients_SOD(patient_transplant_info, patient_transplant_info.Stem_Cell)
